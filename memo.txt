
FairyWorld
・FairyWorldという遊園地を作成する
・FairyWorldではミニチュアハウスを作ったり、おもちゃを作ったり、一緒に遊べるペットを貸し出したりなどの活動を行っている

Factory Method(2)の内容
・ペット体験を案内するアシスタントロボット（PlayfulPetAssistant）を作成する
・PlayfulPetAssistant は、ペットを貸し出すロボットで、公園内で人間とペットを案内する
・ロボットには、人間とペットのツアーがパッケージ化されている
・ツアーの 1 つとして、人間とペットが挨拶をして、公園内を歩き、1 つのランダムなアクティビティを行う「all-rounder pack」がデフォルトとして設定されている
・全く同じツアーで最後に 3 つのランダムなアクティビティを行う「deluxe rounder pack」もある
・PlayfulPetAssistant には、createPlayfulPet という、ペットを作成するための Factory Method が用意されている
・PlayfulPetAssistant は抽象クラスに設定する
・デフォルトでは、抽象メソッドである createPlayfulPet 以外のメソッドは全て実装されている
・PlayfulPetAssistant のサブクラスは、この createPlayfulPet Factory Methodを実装し、特定のペットを作成する必要がある
・PlayfulPetAssistant は、ロボットが誘導する人間（currentPerson）、ペットのレンタル時間（double currentRentTime）、ガイドの一連の活動を文字列として含む

PlayfulPetAssistantが持つメソッド
String[] getActivities: // ロボットがガイダンスをサポートする活動の配列を返します。
void setPerson(Person p): // ロボットが案内するcurrentPersonを設定します。
void setHours(int hours): // ペットをレンタルする時間を設定します。
double getHours(): // ペットをレンタルする時間を返します。
void reset(): // 全ての状態をデフォルトにクリアしてロボットをリセットします。
PlayfulPet createPlayfulPet()： // ペットを作成して返します。これはFactory Methodです。

Factory Method(3)の内容
・pony、hamster、chicken、goat をサポートするようにコードを拡張する→◯

FairyWorld - PlayfulPets Adventuresの内容
・FairyWorld の PlayfulPet システムを設計し、拡張する

・オプションで人間が n 種類のペットから選択できるようにする→◯

・ペットを選択する際には、FairyWorld が設定した数までレンタルするペットの数を選択することができる→◯

・ペットをレンタルする際、異なるツアーのサポートを可能にする。
デフォルトでは、PlayfulPetAssistantは「all-rounder pack」と「deluxe rounder pack」を持っていますが、独自のツアーを自由に作成することができる

・FairyWorld の rentPet() メソッドは、レンタルするペットのキーを表す文字列、ペットをレンタルする人間、レンタルするペットの数、レンタルするツアーを表す文字列を受け取る→◯
rentPet(string petKey, Person p, int amount, String tour)

・FairyWorld は、税務上収益を記録しておく必要があるため、ペットをレンタルするたびに請求書を作成する必要がある。
ペットがレンタルされるたびに、請求書が生成され、保存される
・FairyWorld には、getRentedPetsInvoice() という関数があり、請求書のリストを返す→◯
・各請求書には、タイトル、説明、総費用が含まれており、どのペットが何匹レンタルされたかが反映されている必要がある→◯

・FairyWorld がより多くの PlayfulPetAssistants を追加できるように、addPlayfulPetAssistant(key, playfulPetAssistant) という関数を作成する→◯
この関数は、PlayfulPet のキーを表す文字列と、レンタルを処理する PlayfulPetAssistant を受け取る

to-do list
・rentPet()が呼ばれるたび、<String key, PlayfulPetAssistant> のハッシュマップを使用して、ロボットを取得する。→◯
このハッシュマップは addPlayfulPetAssistant() が呼ばれたときにロボットが追加される場所でもある

・ペットの数を受け取り、PlayfulPets の動的配列を返す、createPlayfulPets(int amount) と呼ばれる別の Factory Method を PlayfulPetAssistant に追加する→◯

・複数のペットを持つ場合、抽象クラス PlayfulPetAssistant は、独自のアルゴリズムを定義する→◯
Person、ツアーの文字列、ペットの数を受け取る、runAssistanceTourMultiple() と呼ばれるメソッドを作成することもできますし、runAssistanceTour() 関数をオーバーロードして、ペットの数を 3 番目のパラメータに追加することもできる。
Person、ツアーのみが提供されるケースでは、ペットの数を 1 することで、runAssistanceTour を呼び出すこともできる

FairyWorld - Virtual Rides
・Factory Method を使って、アトラクションをサポートするように実装する→◯
・アルゴリズムに基づいて、アトラクションを作成し、体験をシミュレートする RideExperience クラスを作成する→◯
・アトラクションの種類
Family Coasters, Inverted Coasters, Launcher Coaster, Track Rides, Dive Coasters, Water Coasters, Looping Coasters, 
Junior Coasters, Go Karts, Wood Coasters, Interactive Rides, Gentle Rides, Haunted House, Mechanical Bull

・アトラクションの作成はサブクラスに委ねる→◯
・RideExperience は、Person と StateOfAffairs というオブジェクトを受け取る ride() と呼ばれるメソッドを提供する抽象クラス→◯
・StateOfAffairs は、現在の時刻、日付、人数、温度、音のレベル、雰囲気等、FairyWorld に関連した多くの情報を含むオブジェクト。→◯
・ride() は、Person が乗るアトラクションを作成し、アトラクションに乗っている様子をシミュレートし、Person の状態を更新する→◯
・アトラクションを作成するには、createRide() と呼ばれる Factory Method を使用する→◯

・Person クラスを拡張して Status インターフェースを実装する。→◯
この Status インターフェースには、Person の一般的な状態に対してセッター/ゲッターが含まれている。→◯
例えば、状態が Happiness であれば、getHappiness() と setHappiness() を持つ。
以下が状態。
Happiness, Energy, Nausea, Bathroom, Frightful

・ride() 関数は、アトラクション、Person、シミュレーションに必要な情報を出力する。→◯
アトラクションのナレーションを行い、恐怖度、スリル度、満足度等のデータを用いて、アトラクションに乗った Person の心情を描写する

・Person のゲッター/セッターを呼び出すことで、Person の状態を更新する。→◯
例えば、ちょうど良いスリルがあるとき、幸福度を上げることができます。またアトラクションが子供向けではない場合、一定時間子供が泣く要素を描写することができます。

・抽象クラス RideExperience を実装する→◯
・RideExperience をサブクラス化し、createRide() という Factory Method を実装することで、複数の異なるアトラクションを作成してください。→◯

